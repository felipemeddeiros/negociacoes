{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAe;;AAEXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEAA,+CAAWC,KAAX,GAAmB,YAAM;AACrB,8CAAO,8CAAP;AACH,qCAFD;AAGH;;AAED;AACAI,wCAAQL,UAAR;AACH,6BAfD;;AAiBAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BALD;AAMH,yBAhCM,CAAP;AAiCH;;;kDAEoBtB,U,EAAY;;AAE7BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAJD;AAKH;;;sDAEwB;;AAErB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\nconst stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName,version);\n\n            openRequest.onupgradeneeded = e => {\n\n                ConnectionFactory._createStores(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {    \n\n                if(!connection){\n\n                    connection = e.target.result;\n                    \n                    close = connection.close.bind(connection);\n                    \n                    connection.close = () => { \n                        throw ('Você não pode fechar uma conexão desse jeito')\n                    }; \n                }\n\n                //recebe conexão já existente ou uma que acabou de ser criada\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {    \n\n                console.log(e.target.error);\n\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createStores(connection) {\n\n        stores.forEach(store => {\n\n            if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n            connection.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n\n    static closeConnection() {\n\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n}"]}